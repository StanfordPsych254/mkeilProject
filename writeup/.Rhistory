for(word in FileA_recall_split[[i]]){
#adjustment for plural words
if(word == "egg"){
word = paste(word,"s",sep = "")
}
word = tolower(c(word))
if ( word %in% FileA_split[[i]]){
FileAScore = FileAScore + 1
}
}
FileAScore
d1$AScore[i] = FileAScore
}
#FileB
for(i in seq(from=1, to=nrow(d1), by=1)){
FileB_split = strsplit(d1$FileB, "[,]")
FileB_split[[i]]
FileB_recall_split = strsplit(d1$B_Recall, "[\n]")
FileBScore = 0
for(word in FileB_recall_split[[i]]){
#adjustment for plural words
if(word == "bike" | word == "plane" | word == "jean"){
word = paste(word,"s",sep = "")
}
word = tolower(c(word))
if ( word %in% FileB_split[[i]]){
FileBScore = FileBScore + 1
}
}
FileBScore
d1$BScore[i] = FileBScore/8
}
d1 <- d1 %>% filter(trial_num != 1, trial_num != 2)
d1 <- d1 %>% mutate(save_condition = ifelse(save_condition == "nosave","delete","save"))
included_workers <- d1 %>%
group_by(workerId)  %>%
summarise(followed_instructions = all(save_condition == save_choice)) %>%
filter(followed_instructions)
d1 <- d1 %>% filter(workerId %in% included_workers$workerId)
path <- "~/Documents/Psych254/MturkFinal/"
files <- dir(paste0(path,"production-results/"),
pattern = "*.json")
d.raw <- data.frame()
for (f in files) {
jf <- paste0(path, "production-results/",f)
jd <- fromJSON(paste(readLines(jf), collapse=""))
jd$answers$data[9]
for(i in 1:8){
id <- data.frame(
workerId = jd$WorkerId,
trial_num = i,
start_num = jd$answers$data[[i]]$start_number,
digits = jd$answers$data[[i]]$digits,
word_condition = jd$answers$data[[i]]$word_condition,
save_choice = jd$answers$data[[i]]$save_choice,
save_condition = jd$answers$data[[i]]$save_condition,
FileB = jd$answers$data[[i]]$FileB,
FileA = jd$answers$data[[i]]$FileA,
B_Recall = jd$answers$data[[i]]$B_Recall,
A_Recall = jd$answers$data[[i]]$A_Recall,
time = jd$answers$data[[i]]$time,
age = jd$answers$data[[9]]$age,
gender = jd$answers$data[[9]]$gender,
homelang = jd$answers$data[[9]]$homelang,
race = jd$answers$data[[9]]$race
# comments = jd$answers$data[[9]]$comments
)
d.raw <- bind_rows(d.raw, id)
}
}
d1 <- d.raw
entered_digits = strsplit(d1$digits, "[\n]")
for(i in seq(from=1, to=nrow(d1), by=1)){
correct_digit = d1$start_num[i]
digitScore = 0
for(digit in entered_digits[[i]]){
correct_digit = correct_digit -3
if (digit == correct_digit){
digitScore = digitScore + 1
}
correct_digit = as.numeric(digit)
}
digitScore
d1$DigitScore[i] = digitScore
}
#FileA
FileA_split = strsplit(d1$FileA, "[,]")
FileA_recall_split = strsplit(d1$A_Recall, "[\n]")
for(i in seq(from=1, to=nrow(d1), by=1)){
FileA_split[[i]]
FileAScore = 0
for(word in FileA_recall_split[[i]]){
#adjustment for plural words
if(word == "egg"){
word = paste(word,"s",sep = "")
}
word = tolower(c(word))
if ( word %in% FileA_split[[i]]){
FileAScore = FileAScore + 1
}
}
FileAScore
d1$AScore[i] = FileAScore
}
#FileB
for(i in seq(from=1, to=nrow(d1), by=1)){
FileB_split = strsplit(d1$FileB, "[,]")
FileB_split[[i]]
FileB_recall_split = strsplit(d1$B_Recall, "[\n]")
FileBScore = 0
for(word in FileB_recall_split[[i]]){
#adjustment for plural words
if(word == "bike" | word == "plane" | word == "jean"){
word = paste(word,"s",sep = "")
}
word = tolower(c(word))
if ( word %in% FileB_split[[i]]){
FileBScore = FileBScore + 1
}
}
FileBScore
d1$BScore[i] = FileBScore/8
}
d1 <- d1 %>% filter(trial_num != 1, trial_num != 2)
d1 <- d1 %>% mutate(save_condition = ifelse(save_condition == "nosave","delete","save"))
included_workers <- d1 %>%
group_by(workerId)  %>%
summarise(followed_instructions = all(save_condition == save_choice)) %>%
filter(followed_instructions)
library(ggplot2)
library(tidyr)
library(dplyr)
library(lme4)
library(rjson)
sem <- function(x) {sd(x, na.rm=TRUE) / sqrt(length(x))}
ci95 <- function(x) {sem(x) * 1.96}
path <- "~/Documents/Psych254/MturkFinal/"
files <- dir(paste0(path,"production-results/"),
pattern = "*.json")
d.raw <- data.frame()
for (f in files) {
jf <- paste0(path, "production-results/",f)
jd <- fromJSON(paste(readLines(jf), collapse=""))
jd$answers$data[9]
for(i in 1:8){
id <- data.frame(
workerId = jd$WorkerId,
trial_num = i,
start_num = jd$answers$data[[i]]$start_number,
digits = jd$answers$data[[i]]$digits,
word_condition = jd$answers$data[[i]]$word_condition,
save_choice = jd$answers$data[[i]]$save_choice,
save_condition = jd$answers$data[[i]]$save_condition,
FileB = jd$answers$data[[i]]$FileB,
FileA = jd$answers$data[[i]]$FileA,
B_Recall = jd$answers$data[[i]]$B_Recall,
A_Recall = jd$answers$data[[i]]$A_Recall,
time = jd$answers$data[[i]]$time,
age = jd$answers$data[[9]]$age,
gender = jd$answers$data[[9]]$gender,
homelang = jd$answers$data[[9]]$homelang,
race = jd$answers$data[[9]]$race
# comments = jd$answers$data[[9]]$comments
)
d.raw <- bind_rows(d.raw, id)
}
}
d1 <- d.raw
entered_digits = strsplit(d1$digits, "[\n]")
for(i in seq(from=1, to=nrow(d1), by=1)){
correct_digit = d1$start_num[i]
digitScore = 0
for(digit in entered_digits[[i]]){
correct_digit = correct_digit -3
if (digit == correct_digit){
digitScore = digitScore + 1
}
correct_digit = as.numeric(digit)
}
digitScore
d1$DigitScore[i] = digitScore
}
#FileA
FileA_split = strsplit(d1$FileA, "[,]")
FileA_recall_split = strsplit(d1$A_Recall, "[\n]")
for(i in seq(from=1, to=nrow(d1), by=1)){
FileA_split[[i]]
FileAScore = 0
for(word in FileA_recall_split[[i]]){
#adjustment for plural words
if(word == "egg"){
word = paste(word,"s",sep = "")
}
word = tolower(c(word))
if ( word %in% FileA_split[[i]]){
FileAScore = FileAScore + 1
}
}
FileAScore
d1$AScore[i] = FileAScore
}
#FileB
for(i in seq(from=1, to=nrow(d1), by=1)){
FileB_split = strsplit(d1$FileB, "[,]")
FileB_split[[i]]
FileB_recall_split = strsplit(d1$B_Recall, "[\n]")
FileBScore = 0
for(word in FileB_recall_split[[i]]){
#adjustment for plural words
if(word == "bike" | word == "plane" | word == "jean"){
word = paste(word,"s",sep = "")
}
word = tolower(c(word))
if ( word %in% FileB_split[[i]]){
FileBScore = FileBScore + 1
}
}
FileBScore
d1$BScore[i] = FileBScore/8
}
d1 <- d1 %>% filter(trial_num != 1, trial_num != 2)
d1 <- d1 %>% mutate(save_condition = ifelse(save_condition == "nosave","delete","save"))
included_workers <- d1 %>%
group_by(workerId)  %>%
summarise(followed_instructions = all(save_condition == save_choice)) %>%
filter(followed_instructions)
d1 <- d1 %>% filter(workerId %in% included_workers$workerId)
d1_means <- d1 %>%group_by(workerId,word_condition) %>% summarise(meanB = mean(BScore), meanA =mean(AScore), meanDigit = mean(DigitScore), meanTime = mean(time))
sb_meanB = sd(d1_means$meanB)
top_cutoff = mean(d1_means$meanB) + (2*sb_meanB)
bottom_cutoff = mean(d1_means$meanB) - (2*sb_meanB)
#filter by digitScore
sb_digitScore = sd(d1_means$meanDigit)
digit_top_cutoff = mean(d1_means$meanDigit) + (2*sb_digitScore)
digit_bottom_cutoff = mean(d1_means$meanDigit) - (2*sb_digitScore)
d1_keep <- filter(d1_means, meanB < top_cutoff & meanB > bottom_cutoff)
d1_keep <- filter(d1_keep, meanDigit > digit_bottom_cutoff)
d1_means <- d1_keep
d1 <- filter(d1, workerId %in% d1_keep$workerId)
qplot(meanB, data = d1_means, geom ="histogram",binwidth = .1,facets=.~word_condition)
qplot(meanA, data = d1_means, geom ="histogram", binwidth = 1,facets=.~word_condition)
qplot(meanB, data = d1_means, geom ="histogram",binwidth = .1,facets=save_condition~word_condition)
qplot(meanB, data = d1_means, geom ="histogram",binwidth = .1,facets=~word_condition)
qplot(meanA, data = d1_means, geom ="histogram", binwidth = 1,facets=.~word_condition)
qplot(meanTime, data = d1_means, geom ="histogram")
qplot(meanDigit, data = d1_means, geom ="histogram", binwidth = .5)
qplot(meanDigit, data = d1_means, geom ="histogram", binwidth = 1)
qplot(meanDigit, data = d1_means, geom ="histogram", binwidth = 1.5)
qplot(meanDigit, data = d1_means, geom ="histogram", binwidth = 2)
d1_bar <- d1 %>%group_by(workerId,word_condition,save_condition) %>% summarise(meanB = mean(BScore), meanA =mean(AScore), meanDigit = mean(DigitScore), meanTime = mean(time), seB = sem(BScore))
d2_bar <- d1_bar %>%group_by(word_condition,save_condition) %>% summarise(meanBacross = mean(meanB), meanA =mean(meanA), meanDigit = mean(meanDigit), meanTime = mean(meanTime), seB = sem(meanB))
d2_bar$word_condition = as.factor(d2_bar$word_condition)
ggplot(d2_bar,aes(x = word_condition, y = meanBacross,fill=save_condition))+
geom_bar(position='dodge',stat='identity')+
geom_errorbar(aes(ymin=meanBacross-seB,ymax=meanBacross+seB),
width=.2,
position=position_dodge(.9)) + theme_bw() + ylab("Proportion of Words Correctly Recalled") + xlab("formation  File A")
ttestA8 = t.test(meanA ~ save_condition, data = d1_bar %>% filter(word_condition == 8))
ttestA8
ttestA2 = t.test(meanA ~ save_condition, data = d1_bar %>% filter(word_condition == 2))
ttestA2
ttestB8 = t.test(meanB ~ save_condition, data = d1_bar %>% filter(word_condition == 8))
ttestB8
ttestB2 = t.test(meanB ~ save_condition, data = d1_bar %>% filter(word_condition == 2))
ttestB2
d1 <- d1 %>% filter(trial_num != 1, trial_num != 2, trial_num != 3, trial_num != 4)
d1 <- d1 %>% mutate(save_condition = ifelse(save_condition == "nosave","delete","save"))
included_workers <- d1 %>%
group_by(workerId)  %>%
summarise(followed_instructions = all(save_condition == save_choice)) %>%
filter(followed_instructions)
d1 <- d1 %>% filter(workerId %in% included_workers$workerId)
d1_means <- d1 %>%group_by(workerId,word_condition) %>% summarise(meanB = mean(BScore), meanA =mean(AScore), meanDigit = mean(DigitScore), meanTime = mean(time))
sb_meanB = sd(d1_means$meanB)
top_cutoff = mean(d1_means$meanB) + (2*sb_meanB)
bottom_cutoff = mean(d1_means$meanB) - (2*sb_meanB)
#filter by digitScore
sb_digitScore = sd(d1_means$meanDigit)
digit_top_cutoff = mean(d1_means$meanDigit) + (2*sb_digitScore)
digit_bottom_cutoff = mean(d1_means$meanDigit) - (2*sb_digitScore)
d1_keep <- filter(d1_means, meanB < top_cutoff & meanB > bottom_cutoff)
d1_keep <- filter(d1_keep, meanDigit > digit_bottom_cutoff)
d1_means <- d1_keep
d1 <- filter(d1, workerId %in% d1_keep$workerId)
path <- "~/Documents/Psych254/MturkFinal/"
files <- dir(paste0(path,"production-results/"),
pattern = "*.json")
d.raw <- data.frame()
for (f in files) {
jf <- paste0(path, "production-results/",f)
jd <- fromJSON(paste(readLines(jf), collapse=""))
jd$answers$data[9]
for(i in 1:8){
id <- data.frame(
workerId = jd$WorkerId,
trial_num = i,
start_num = jd$answers$data[[i]]$start_number,
digits = jd$answers$data[[i]]$digits,
word_condition = jd$answers$data[[i]]$word_condition,
save_choice = jd$answers$data[[i]]$save_choice,
save_condition = jd$answers$data[[i]]$save_condition,
FileB = jd$answers$data[[i]]$FileB,
FileA = jd$answers$data[[i]]$FileA,
B_Recall = jd$answers$data[[i]]$B_Recall,
A_Recall = jd$answers$data[[i]]$A_Recall,
time = jd$answers$data[[i]]$time,
age = jd$answers$data[[9]]$age,
gender = jd$answers$data[[9]]$gender,
homelang = jd$answers$data[[9]]$homelang,
race = jd$answers$data[[9]]$race
# comments = jd$answers$data[[9]]$comments
)
d.raw <- bind_rows(d.raw, id)
}
}
d1 <- d.raw
entered_digits = strsplit(d1$digits, "[\n]")
for(i in seq(from=1, to=nrow(d1), by=1)){
correct_digit = d1$start_num[i]
digitScore = 0
for(digit in entered_digits[[i]]){
correct_digit = correct_digit -3
if (digit == correct_digit){
digitScore = digitScore + 1
}
correct_digit = as.numeric(digit)
}
digitScore
d1$DigitScore[i] = digitScore
}
FileA_split = strsplit(d1$FileA, "[,]")
FileA_recall_split = strsplit(d1$A_Recall, "[\n]")
for(i in seq(from=1, to=nrow(d1), by=1)){
FileA_split[[i]]
FileAScore = 0
for(word in FileA_recall_split[[i]]){
#adjustment for plural words
if(word == "egg"){
word = paste(word,"s",sep = "")
}
word = tolower(c(word))
if ( word %in% FileA_split[[i]]){
FileAScore = FileAScore + 1
}
}
FileAScore
d1$AScore[i] = FileAScore
}
#FileB
for(i in seq(from=1, to=nrow(d1), by=1)){
FileB_split = strsplit(d1$FileB, "[,]")
FileB_split[[i]]
FileB_recall_split = strsplit(d1$B_Recall, "[\n]")
FileBScore = 0
for(word in FileB_recall_split[[i]]){
#adjustment for plural words
if(word == "bike" | word == "plane" | word == "jean"){
word = paste(word,"s",sep = "")
}
word = tolower(c(word))
if ( word %in% FileB_split[[i]]){
FileBScore = FileBScore + 1
}
}
FileBScore
d1$BScore[i] = FileBScore/8
}
d1 <- d1 %>% filter(trial_num != 1, trial_num != 2, trial_num != 3, trial_num != 4)
d1 <- d1 %>% mutate(save_condition = ifelse(save_condition == "nosave","delete","save"))
included_workers <- d1 %>%
group_by(workerId)  %>%
summarise(followed_instructions = all(save_condition == save_choice)) %>%
filter(followed_instructions)
d1 <- d1 %>% filter(workerId %in% included_workers$workerId)
d1_means <- d1 %>%group_by(workerId,word_condition) %>% summarise(meanB = mean(BScore), meanA =mean(AScore), meanDigit = mean(DigitScore), meanTime = mean(time))
sb_meanB = sd(d1_means$meanB)
top_cutoff = mean(d1_means$meanB) + (2*sb_meanB)
bottom_cutoff = mean(d1_means$meanB) - (2*sb_meanB)
sb_digitScore = sd(d1_means$meanDigit)
digit_top_cutoff = mean(d1_means$meanDigit) + (2*sb_digitScore)
digit_bottom_cutoff = mean(d1_means$meanDigit) - (2*sb_digitScore)
d1_keep <- filter(d1_means, meanB < top_cutoff & meanB > bottom_cutoff)
d1_keep <- filter(d1_keep, meanDigit > digit_bottom_cutoff)
d1_means <- d1_keep
d1 <- filter(d1, workerId %in% d1_keep$workerId)
d1_bar <- d1 %>%group_by(workerId,word_condition,save_condition) %>% summarise(meanB = mean(BScore), meanA =mean(AScore), meanDigit = mean(DigitScore), meanTime = mean(time), seB = sem(BScore))
d2_bar <- d1_bar %>%group_by(word_condition,save_condition) %>% summarise(meanBacross = mean(meanB), meanA =mean(meanA), meanDigit = mean(meanDigit), meanTime = mean(meanTime), seB = sem(meanB))
d2_bar$word_condition = as.factor(d2_bar$word_condition)
ggplot(d2_bar,aes(x = word_condition, y = meanBacross,fill=save_condition))+
geom_bar(position='dodge',stat='identity')+
geom_errorbar(aes(ymin=meanBacross-seB,ymax=meanBacross+seB),
width=.2,
position=position_dodge(.9)) + theme_bw() + ylab("Proportion of Words Correctly Recalled") + xlab("formation  File A")
ttestA8 = t.test(meanA ~ save_condition, data = d1_bar %>% filter(word_condition == 8))
ttestA8
ttestB8 = t.test(meanB ~ save_condition, data = d1_bar %>% filter(word_condition == 8))
ttestB8
ttestB2 = t.test(meanB ~ save_condition, data = d1_bar %>% filter(word_condition == 2))
ttestB2
sem <- function(x) {sd(x, na.rm=TRUE) / sqrt(length(x))}
ci95 <- function(x) {sem(x) * 1.96}
path <- "~/Documents/Psych254/MturkFinal/"
files <- dir(paste0(path,"production-results/"),
pattern = "*.json")
d.raw <- data.frame()
for (f in files) {
jf <- paste0(path, "production-results/",f)
jd <- fromJSON(paste(readLines(jf), collapse=""))
jd$answers$data[9]
for(i in 1:8){
id <- data.frame(
workerId = jd$WorkerId,
trial_num = i,
start_num = jd$answers$data[[i]]$start_number,
digits = jd$answers$data[[i]]$digits,
word_condition = jd$answers$data[[i]]$word_condition,
save_choice = jd$answers$data[[i]]$save_choice,
save_condition = jd$answers$data[[i]]$save_condition,
FileB = jd$answers$data[[i]]$FileB,
FileA = jd$answers$data[[i]]$FileA,
B_Recall = jd$answers$data[[i]]$B_Recall,
A_Recall = jd$answers$data[[i]]$A_Recall,
time = jd$answers$data[[i]]$time,
age = jd$answers$data[[9]]$age,
gender = jd$answers$data[[9]]$gender,
homelang = jd$answers$data[[9]]$homelang,
race = jd$answers$data[[9]]$race
# comments = jd$answers$data[[9]]$comments
)
d.raw <- bind_rows(d.raw, id)
}
}
d1 <- d.raw
entered_digits = strsplit(d1$digits, "[\n]")
for(i in seq(from=1, to=nrow(d1), by=1)){
correct_digit = d1$start_num[i]
digitScore = 0
for(digit in entered_digits[[i]]){
correct_digit = correct_digit -3
if (digit == correct_digit){
digitScore = digitScore + 1
}
correct_digit = as.numeric(digit)
}
digitScore
d1$DigitScore[i] = digitScore
}
#FileA
FileA_split = strsplit(d1$FileA, "[,]")
FileA_recall_split = strsplit(d1$A_Recall, "[\n]")
for(i in seq(from=1, to=nrow(d1), by=1)){
FileA_split[[i]]
FileAScore = 0
for(word in FileA_recall_split[[i]]){
#adjustment for plural words
if(word == "egg"){
word = paste(word,"s",sep = "")
}
word = tolower(c(word))
if ( word %in% FileA_split[[i]]){
FileAScore = FileAScore + 1
}
}
FileAScore
d1$AScore[i] = FileAScore
}
#FileB
for(i in seq(from=1, to=nrow(d1), by=1)){
FileB_split = strsplit(d1$FileB, "[,]")
FileB_split[[i]]
FileB_recall_split = strsplit(d1$B_Recall, "[\n]")
FileBScore = 0
for(word in FileB_recall_split[[i]]){
#adjustment for plural words
if(word == "bike" | word == "plane" | word == "jean"){
word = paste(word,"s",sep = "")
}
word = tolower(c(word))
if ( word %in% FileB_split[[i]]){
FileBScore = FileBScore + 1
}
}
FileBScore
d1$BScore[i] = FileBScore/8
}
#remove trialnum 1 and 2
d1 <- d1 %>% filter(trial_num != 1, trial_num != 2)
#rename save choice from delete
d1 <- d1 %>% mutate(save_condition = ifelse(save_condition == "nosave","delete","save"))
#remove wrong followers
included_workers <- d1 %>%
group_by(workerId)  %>%
summarise(followed_instructions = all(save_condition == save_choice)) %>%
filter(followed_instructions)
d1 <- d1 %>% filter(workerId %in% included_workers$workerId)
#7 particpants eliminated
d1_means <- d1 %>%group_by(workerId,word_condition) %>% summarise(meanB = mean(BScore), meanA =mean(AScore), meanDigit = mean(DigitScore), meanTime = mean(time))
d1_means <- d1 %>%group_by(workerId,word_condition) %>% summarise(meanB = mean(BScore), meanA =mean(AScore), meanDigit = mean(DigitScore), meanTime = mean(time))
#filter by recallScore
sb_meanB = sd(d1_means$meanB)
top_cutoff = mean(d1_means$meanB) + (2*sb_meanB)
bottom_cutoff = mean(d1_means$meanB) - (2*sb_meanB)
#filter by digitScore
sb_digitScore = sd(d1_means$meanDigit)
digit_top_cutoff = mean(d1_means$meanDigit) + (2*sb_digitScore)
digit_bottom_cutoff = mean(d1_means$meanDigit) - (2*sb_digitScore)
d1_keep <- filter(d1_means, meanB < top_cutoff & meanB > bottom_cutoff)
d1_keep <- filter(d1_keep, meanDigit > digit_bottom_cutoff)
d1_means <- d1_keep
d1 <- filter(d1, workerId %in% d1_keep$workerId)
View(d1_means)
size <- filter(d1_means, word_condition ==8)
